// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: rpc.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// request data
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op    uint32 `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	RpcId int64  `protobuf:"varint,2,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	Data  []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *Request) GetRpcId() int64 {
	if x != nil {
		return x.RpcId
	}
	return 0
}

func (x *Request) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// response data
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	RpcId int64  `protobuf:"varint,2,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Response) GetRpcId() int64 {
	if x != nil {
		return x.RpcId
	}
	return 0
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63,
	0x22, 0x44, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x70, 0x63,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x70, 0x63, 0x49, 0x64, 0x32, 0xd7, 0x03,
	0x0a, 0x12, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x65, 0x4f, 0x70, 0x12, 0x34, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x6e, 0x6f, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x70, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x15, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x16, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x6f,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf6, 0x0c, 0x0a, 0x11, 0x53, 0x6c, 0x61, 0x76,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x4f, 0x70, 0x12, 0x2a, 0x0a,
	0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0a, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a,
	0x05, 0x47, 0x65, 0x6e, 0x54, 0x78, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6f, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x2f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x2f, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x2e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x2f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x78, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0b, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x47, 0x61,
	0x73, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x2d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x74,
	0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x28, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x08, 0x47, 0x61, 0x73,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x12,
	0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b,
	0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x0c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x73, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x58, 0x73, 0x68, 0x61, 0x72, 0x64, 0x54, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x58, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x18, 0x41, 0x64, 0x64,
	0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x70, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x13, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x65, 0x77, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_rpc_proto_goTypes = []interface{}{
	(*Request)(nil),  // 0: rpc.Request
	(*Response)(nil), // 1: rpc.Response
}
var file_rpc_proto_depIdxs = []int32{
	0,  // 0: rpc.MasterServerSideOp.AddMinorBlockHeader:input_type -> rpc.Request
	0,  // 1: rpc.MasterServerSideOp.AddMinorBlockHeaderList:input_type -> rpc.Request
	0,  // 2: rpc.MasterServerSideOp.BroadcastNewTip:input_type -> rpc.Request
	0,  // 3: rpc.MasterServerSideOp.BroadcastTransactions:input_type -> rpc.Request
	0,  // 4: rpc.MasterServerSideOp.BroadcastNewMinorBlock:input_type -> rpc.Request
	0,  // 5: rpc.MasterServerSideOp.GetMinorBlockList:input_type -> rpc.Request
	0,  // 6: rpc.MasterServerSideOp.GetMinorBlockHeaderList:input_type -> rpc.Request
	0,  // 7: rpc.MasterServerSideOp.GetMinorBlockHeaderListWithSkip:input_type -> rpc.Request
	0,  // 8: rpc.SlaveServerSideOp.heartBeat:input_type -> rpc.Request
	0,  // 9: rpc.SlaveServerSideOp.MasterInfo:input_type -> rpc.Request
	0,  // 10: rpc.SlaveServerSideOp.Ping:input_type -> rpc.Request
	0,  // 11: rpc.SlaveServerSideOp.GenTx:input_type -> rpc.Request
	0,  // 12: rpc.SlaveServerSideOp.AddRootBlock:input_type -> rpc.Request
	0,  // 13: rpc.SlaveServerSideOp.GetUnconfirmedHeaderList:input_type -> rpc.Request
	0,  // 14: rpc.SlaveServerSideOp.GetAccountData:input_type -> rpc.Request
	0,  // 15: rpc.SlaveServerSideOp.AddTransaction:input_type -> rpc.Request
	0,  // 16: rpc.SlaveServerSideOp.GetMinorBlock:input_type -> rpc.Request
	0,  // 17: rpc.SlaveServerSideOp.GetTransaction:input_type -> rpc.Request
	0,  // 18: rpc.SlaveServerSideOp.ExecuteTransaction:input_type -> rpc.Request
	0,  // 19: rpc.SlaveServerSideOp.GetTransactionReceipt:input_type -> rpc.Request
	0,  // 20: rpc.SlaveServerSideOp.GetTransactionListByAddress:input_type -> rpc.Request
	0,  // 21: rpc.SlaveServerSideOp.GetAllTx:input_type -> rpc.Request
	0,  // 22: rpc.SlaveServerSideOp.GetLogs:input_type -> rpc.Request
	0,  // 23: rpc.SlaveServerSideOp.EstimateGas:input_type -> rpc.Request
	0,  // 24: rpc.SlaveServerSideOp.GetStorageAt:input_type -> rpc.Request
	0,  // 25: rpc.SlaveServerSideOp.GetCode:input_type -> rpc.Request
	0,  // 26: rpc.SlaveServerSideOp.GasPrice:input_type -> rpc.Request
	0,  // 27: rpc.SlaveServerSideOp.GetWork:input_type -> rpc.Request
	0,  // 28: rpc.SlaveServerSideOp.SubmitWork:input_type -> rpc.Request
	0,  // 29: rpc.SlaveServerSideOp.GetRootChainStakes:input_type -> rpc.Request
	0,  // 30: rpc.SlaveServerSideOp.AddXshardTxList:input_type -> rpc.Request
	0,  // 31: rpc.SlaveServerSideOp.BatchAddXshardTxList:input_type -> rpc.Request
	0,  // 32: rpc.SlaveServerSideOp.AddMinorBlockListForSync:input_type -> rpc.Request
	0,  // 33: rpc.SlaveServerSideOp.SetMining:input_type -> rpc.Request
	0,  // 34: rpc.SlaveServerSideOp.CheckMinorBlocksInRoot:input_type -> rpc.Request
	0,  // 35: rpc.SlaveServerSideOp.GetMinorBlockList:input_type -> rpc.Request
	0,  // 36: rpc.SlaveServerSideOp.GetMinorBlockHeaderList:input_type -> rpc.Request
	0,  // 37: rpc.SlaveServerSideOp.GetMinorBlockHeaderListWithSkip:input_type -> rpc.Request
	0,  // 38: rpc.SlaveServerSideOp.HandleNewTip:input_type -> rpc.Request
	0,  // 39: rpc.SlaveServerSideOp.AddTransactions:input_type -> rpc.Request
	0,  // 40: rpc.SlaveServerSideOp.HandleNewMinorBlock:input_type -> rpc.Request
	1,  // 41: rpc.MasterServerSideOp.AddMinorBlockHeader:output_type -> rpc.Response
	1,  // 42: rpc.MasterServerSideOp.AddMinorBlockHeaderList:output_type -> rpc.Response
	1,  // 43: rpc.MasterServerSideOp.BroadcastNewTip:output_type -> rpc.Response
	1,  // 44: rpc.MasterServerSideOp.BroadcastTransactions:output_type -> rpc.Response
	1,  // 45: rpc.MasterServerSideOp.BroadcastNewMinorBlock:output_type -> rpc.Response
	1,  // 46: rpc.MasterServerSideOp.GetMinorBlockList:output_type -> rpc.Response
	1,  // 47: rpc.MasterServerSideOp.GetMinorBlockHeaderList:output_type -> rpc.Response
	1,  // 48: rpc.MasterServerSideOp.GetMinorBlockHeaderListWithSkip:output_type -> rpc.Response
	1,  // 49: rpc.SlaveServerSideOp.heartBeat:output_type -> rpc.Response
	1,  // 50: rpc.SlaveServerSideOp.MasterInfo:output_type -> rpc.Response
	1,  // 51: rpc.SlaveServerSideOp.Ping:output_type -> rpc.Response
	1,  // 52: rpc.SlaveServerSideOp.GenTx:output_type -> rpc.Response
	1,  // 53: rpc.SlaveServerSideOp.AddRootBlock:output_type -> rpc.Response
	1,  // 54: rpc.SlaveServerSideOp.GetUnconfirmedHeaderList:output_type -> rpc.Response
	1,  // 55: rpc.SlaveServerSideOp.GetAccountData:output_type -> rpc.Response
	1,  // 56: rpc.SlaveServerSideOp.AddTransaction:output_type -> rpc.Response
	1,  // 57: rpc.SlaveServerSideOp.GetMinorBlock:output_type -> rpc.Response
	1,  // 58: rpc.SlaveServerSideOp.GetTransaction:output_type -> rpc.Response
	1,  // 59: rpc.SlaveServerSideOp.ExecuteTransaction:output_type -> rpc.Response
	1,  // 60: rpc.SlaveServerSideOp.GetTransactionReceipt:output_type -> rpc.Response
	1,  // 61: rpc.SlaveServerSideOp.GetTransactionListByAddress:output_type -> rpc.Response
	1,  // 62: rpc.SlaveServerSideOp.GetAllTx:output_type -> rpc.Response
	1,  // 63: rpc.SlaveServerSideOp.GetLogs:output_type -> rpc.Response
	1,  // 64: rpc.SlaveServerSideOp.EstimateGas:output_type -> rpc.Response
	1,  // 65: rpc.SlaveServerSideOp.GetStorageAt:output_type -> rpc.Response
	1,  // 66: rpc.SlaveServerSideOp.GetCode:output_type -> rpc.Response
	1,  // 67: rpc.SlaveServerSideOp.GasPrice:output_type -> rpc.Response
	1,  // 68: rpc.SlaveServerSideOp.GetWork:output_type -> rpc.Response
	1,  // 69: rpc.SlaveServerSideOp.SubmitWork:output_type -> rpc.Response
	1,  // 70: rpc.SlaveServerSideOp.GetRootChainStakes:output_type -> rpc.Response
	1,  // 71: rpc.SlaveServerSideOp.AddXshardTxList:output_type -> rpc.Response
	1,  // 72: rpc.SlaveServerSideOp.BatchAddXshardTxList:output_type -> rpc.Response
	1,  // 73: rpc.SlaveServerSideOp.AddMinorBlockListForSync:output_type -> rpc.Response
	1,  // 74: rpc.SlaveServerSideOp.SetMining:output_type -> rpc.Response
	1,  // 75: rpc.SlaveServerSideOp.CheckMinorBlocksInRoot:output_type -> rpc.Response
	1,  // 76: rpc.SlaveServerSideOp.GetMinorBlockList:output_type -> rpc.Response
	1,  // 77: rpc.SlaveServerSideOp.GetMinorBlockHeaderList:output_type -> rpc.Response
	1,  // 78: rpc.SlaveServerSideOp.GetMinorBlockHeaderListWithSkip:output_type -> rpc.Response
	1,  // 79: rpc.SlaveServerSideOp.HandleNewTip:output_type -> rpc.Response
	1,  // 80: rpc.SlaveServerSideOp.AddTransactions:output_type -> rpc.Response
	1,  // 81: rpc.SlaveServerSideOp.HandleNewMinorBlock:output_type -> rpc.Response
	41, // [41:82] is the sub-list for method output_type
	0,  // [0:41] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MasterServerSideOpClient is the client API for MasterServerSideOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterServerSideOpClient interface {
	AddMinorBlockHeader(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// p2p apis
	BroadcastNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BroadcastTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BroadcastNewMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlockHeaderListWithSkip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type masterServerSideOpClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServerSideOpClient(cc grpc.ClientConnInterface) MasterServerSideOpClient {
	return &masterServerSideOpClient{cc}
}

func (c *masterServerSideOpClient) AddMinorBlockHeader(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/AddMinorBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) AddMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/AddMinorBlockHeaderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) BroadcastNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/BroadcastNewTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) BroadcastTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/BroadcastTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) BroadcastNewMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/BroadcastNewMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) GetMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/GetMinorBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) GetMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/GetMinorBlockHeaderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) GetMinorBlockHeaderListWithSkip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/GetMinorBlockHeaderListWithSkip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServerSideOpServer is the server API for MasterServerSideOp service.
type MasterServerSideOpServer interface {
	AddMinorBlockHeader(context.Context, *Request) (*Response, error)
	AddMinorBlockHeaderList(context.Context, *Request) (*Response, error)
	// p2p apis
	BroadcastNewTip(context.Context, *Request) (*Response, error)
	BroadcastTransactions(context.Context, *Request) (*Response, error)
	BroadcastNewMinorBlock(context.Context, *Request) (*Response, error)
	GetMinorBlockList(context.Context, *Request) (*Response, error)
	GetMinorBlockHeaderList(context.Context, *Request) (*Response, error)
	GetMinorBlockHeaderListWithSkip(context.Context, *Request) (*Response, error)
}

// UnimplementedMasterServerSideOpServer can be embedded to have forward compatible implementations.
type UnimplementedMasterServerSideOpServer struct {
}

func (*UnimplementedMasterServerSideOpServer) AddMinorBlockHeader(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinorBlockHeader not implemented")
}
func (*UnimplementedMasterServerSideOpServer) AddMinorBlockHeaderList(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinorBlockHeaderList not implemented")
}
func (*UnimplementedMasterServerSideOpServer) BroadcastNewTip(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastNewTip not implemented")
}
func (*UnimplementedMasterServerSideOpServer) BroadcastTransactions(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTransactions not implemented")
}
func (*UnimplementedMasterServerSideOpServer) BroadcastNewMinorBlock(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastNewMinorBlock not implemented")
}
func (*UnimplementedMasterServerSideOpServer) GetMinorBlockList(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlockList not implemented")
}
func (*UnimplementedMasterServerSideOpServer) GetMinorBlockHeaderList(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlockHeaderList not implemented")
}
func (*UnimplementedMasterServerSideOpServer) GetMinorBlockHeaderListWithSkip(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlockHeaderListWithSkip not implemented")
}

func RegisterMasterServerSideOpServer(s *grpc.Server, srv MasterServerSideOpServer) {
	s.RegisterService(&_MasterServerSideOp_serviceDesc, srv)
}

func _MasterServerSideOp_AddMinorBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).AddMinorBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/AddMinorBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).AddMinorBlockHeader(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_AddMinorBlockHeaderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).AddMinorBlockHeaderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/AddMinorBlockHeaderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).AddMinorBlockHeaderList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_BroadcastNewTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).BroadcastNewTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/BroadcastNewTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).BroadcastNewTip(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_BroadcastTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).BroadcastTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/BroadcastTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).BroadcastTransactions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_BroadcastNewMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).BroadcastNewMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/BroadcastNewMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).BroadcastNewMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_GetMinorBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).GetMinorBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/GetMinorBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).GetMinorBlockList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_GetMinorBlockHeaderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).GetMinorBlockHeaderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/GetMinorBlockHeaderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).GetMinorBlockHeaderList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_GetMinorBlockHeaderListWithSkip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).GetMinorBlockHeaderListWithSkip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/GetMinorBlockHeaderListWithSkip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).GetMinorBlockHeaderListWithSkip(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterServerSideOp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MasterServerSideOp",
	HandlerType: (*MasterServerSideOpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMinorBlockHeader",
			Handler:    _MasterServerSideOp_AddMinorBlockHeader_Handler,
		},
		{
			MethodName: "AddMinorBlockHeaderList",
			Handler:    _MasterServerSideOp_AddMinorBlockHeaderList_Handler,
		},
		{
			MethodName: "BroadcastNewTip",
			Handler:    _MasterServerSideOp_BroadcastNewTip_Handler,
		},
		{
			MethodName: "BroadcastTransactions",
			Handler:    _MasterServerSideOp_BroadcastTransactions_Handler,
		},
		{
			MethodName: "BroadcastNewMinorBlock",
			Handler:    _MasterServerSideOp_BroadcastNewMinorBlock_Handler,
		},
		{
			MethodName: "GetMinorBlockList",
			Handler:    _MasterServerSideOp_GetMinorBlockList_Handler,
		},
		{
			MethodName: "GetMinorBlockHeaderList",
			Handler:    _MasterServerSideOp_GetMinorBlockHeaderList_Handler,
		},
		{
			MethodName: "GetMinorBlockHeaderListWithSkip",
			Handler:    _MasterServerSideOp_GetMinorBlockHeaderListWithSkip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// SlaveServerSideOpClient is the client API for SlaveServerSideOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlaveServerSideOpClient interface {
	HeartBeat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	MasterInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// APIs for master
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GenTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddRootBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetUnconfirmedHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAccountData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ExecuteTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransactionReceipt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransactionListByAddress(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAllTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetLogs(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	EstimateGas(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetStorageAt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetCode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GasPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SubmitWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetRootChainStakes(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// APIs for neighbor slaves
	AddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BatchAddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddMinorBlockListForSync(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SetMining(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CheckMinorBlocksInRoot(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// p2p apis
	GetMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlockHeaderListWithSkip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	HandleNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	HandleNewMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type slaveServerSideOpClient struct {
	cc grpc.ClientConnInterface
}

func NewSlaveServerSideOpClient(cc grpc.ClientConnInterface) SlaveServerSideOpClient {
	return &slaveServerSideOpClient{cc}
}

func (c *slaveServerSideOpClient) HeartBeat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/heartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) MasterInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/MasterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GenTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GenTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddRootBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddRootBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetUnconfirmedHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetUnconfirmedHeaderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetAccountData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetAccountData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) ExecuteTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/ExecuteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetTransactionReceipt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetTransactionListByAddress(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetTransactionListByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetAllTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetAllTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetLogs(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) EstimateGas(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/EstimateGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetStorageAt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetStorageAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetCode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GasPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) SubmitWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/SubmitWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetRootChainStakes(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetRootChainStakes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddXshardTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) BatchAddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/BatchAddXshardTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddMinorBlockListForSync(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddMinorBlockListForSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) SetMining(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/SetMining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) CheckMinorBlocksInRoot(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/CheckMinorBlocksInRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMinorBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMinorBlockHeaderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMinorBlockHeaderListWithSkip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMinorBlockHeaderListWithSkip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) HandleNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/HandleNewTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) HandleNewMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/HandleNewMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlaveServerSideOpServer is the server API for SlaveServerSideOp service.
type SlaveServerSideOpServer interface {
	HeartBeat(context.Context, *Request) (*Response, error)
	MasterInfo(context.Context, *Request) (*Response, error)
	// APIs for master
	Ping(context.Context, *Request) (*Response, error)
	GenTx(context.Context, *Request) (*Response, error)
	AddRootBlock(context.Context, *Request) (*Response, error)
	GetUnconfirmedHeaderList(context.Context, *Request) (*Response, error)
	GetAccountData(context.Context, *Request) (*Response, error)
	AddTransaction(context.Context, *Request) (*Response, error)
	GetMinorBlock(context.Context, *Request) (*Response, error)
	GetTransaction(context.Context, *Request) (*Response, error)
	ExecuteTransaction(context.Context, *Request) (*Response, error)
	GetTransactionReceipt(context.Context, *Request) (*Response, error)
	GetTransactionListByAddress(context.Context, *Request) (*Response, error)
	GetAllTx(context.Context, *Request) (*Response, error)
	GetLogs(context.Context, *Request) (*Response, error)
	EstimateGas(context.Context, *Request) (*Response, error)
	GetStorageAt(context.Context, *Request) (*Response, error)
	GetCode(context.Context, *Request) (*Response, error)
	GasPrice(context.Context, *Request) (*Response, error)
	GetWork(context.Context, *Request) (*Response, error)
	SubmitWork(context.Context, *Request) (*Response, error)
	GetRootChainStakes(context.Context, *Request) (*Response, error)
	// APIs for neighbor slaves
	AddXshardTxList(context.Context, *Request) (*Response, error)
	BatchAddXshardTxList(context.Context, *Request) (*Response, error)
	AddMinorBlockListForSync(context.Context, *Request) (*Response, error)
	SetMining(context.Context, *Request) (*Response, error)
	CheckMinorBlocksInRoot(context.Context, *Request) (*Response, error)
	// p2p apis
	GetMinorBlockList(context.Context, *Request) (*Response, error)
	GetMinorBlockHeaderList(context.Context, *Request) (*Response, error)
	GetMinorBlockHeaderListWithSkip(context.Context, *Request) (*Response, error)
	HandleNewTip(context.Context, *Request) (*Response, error)
	AddTransactions(context.Context, *Request) (*Response, error)
	HandleNewMinorBlock(context.Context, *Request) (*Response, error)
}

// UnimplementedSlaveServerSideOpServer can be embedded to have forward compatible implementations.
type UnimplementedSlaveServerSideOpServer struct {
}

func (*UnimplementedSlaveServerSideOpServer) HeartBeat(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) MasterInfo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterInfo not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GenTx(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenTx not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) AddRootBlock(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRootBlock not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetUnconfirmedHeaderList(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnconfirmedHeaderList not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetAccountData(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountData not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) AddTransaction(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransaction not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetMinorBlock(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlock not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetTransaction(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) ExecuteTransaction(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTransaction not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetTransactionReceipt(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionReceipt not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetTransactionListByAddress(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionListByAddress not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetAllTx(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTx not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetLogs(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) EstimateGas(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateGas not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetStorageAt(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageAt not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetCode(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCode not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GasPrice(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrice not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetWork(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWork not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) SubmitWork(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWork not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetRootChainStakes(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootChainStakes not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) AddXshardTxList(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddXshardTxList not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) BatchAddXshardTxList(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddXshardTxList not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) AddMinorBlockListForSync(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinorBlockListForSync not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) SetMining(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMining not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) CheckMinorBlocksInRoot(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMinorBlocksInRoot not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetMinorBlockList(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlockList not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetMinorBlockHeaderList(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlockHeaderList not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetMinorBlockHeaderListWithSkip(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlockHeaderListWithSkip not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) HandleNewTip(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleNewTip not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) AddTransactions(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransactions not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) HandleNewMinorBlock(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleNewMinorBlock not implemented")
}

func RegisterSlaveServerSideOpServer(s *grpc.Server, srv SlaveServerSideOpServer) {
	s.RegisterService(&_SlaveServerSideOp_serviceDesc, srv)
}

func _SlaveServerSideOp_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).HeartBeat(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_MasterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).MasterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/MasterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).MasterInfo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GenTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GenTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GenTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GenTx(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddRootBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddRootBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddRootBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddRootBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetUnconfirmedHeaderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetUnconfirmedHeaderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetUnconfirmedHeaderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetUnconfirmedHeaderList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetAccountData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetAccountData(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_ExecuteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).ExecuteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/ExecuteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).ExecuteTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetTransactionReceipt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetTransactionListByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetTransactionListByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetTransactionListByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetTransactionListByAddress(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetAllTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetAllTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetAllTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetAllTx(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetLogs(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/EstimateGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).EstimateGas(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetStorageAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetStorageAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetStorageAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetStorageAt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetCode(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GasPrice(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetWork(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_SubmitWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).SubmitWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/SubmitWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).SubmitWork(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetRootChainStakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetRootChainStakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetRootChainStakes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetRootChainStakes(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddXshardTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddXshardTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddXshardTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddXshardTxList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_BatchAddXshardTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).BatchAddXshardTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/BatchAddXshardTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).BatchAddXshardTxList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddMinorBlockListForSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddMinorBlockListForSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddMinorBlockListForSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddMinorBlockListForSync(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_SetMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).SetMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/SetMining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).SetMining(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_CheckMinorBlocksInRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).CheckMinorBlocksInRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/CheckMinorBlocksInRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).CheckMinorBlocksInRoot(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMinorBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMinorBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMinorBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMinorBlockList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMinorBlockHeaderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMinorBlockHeaderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMinorBlockHeaderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMinorBlockHeaderList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMinorBlockHeaderListWithSkip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMinorBlockHeaderListWithSkip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMinorBlockHeaderListWithSkip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMinorBlockHeaderListWithSkip(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_HandleNewTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).HandleNewTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/HandleNewTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).HandleNewTip(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddTransactions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_HandleNewMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).HandleNewMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/HandleNewMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).HandleNewMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _SlaveServerSideOp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.SlaveServerSideOp",
	HandlerType: (*SlaveServerSideOpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "heartBeat",
			Handler:    _SlaveServerSideOp_HeartBeat_Handler,
		},
		{
			MethodName: "MasterInfo",
			Handler:    _SlaveServerSideOp_MasterInfo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SlaveServerSideOp_Ping_Handler,
		},
		{
			MethodName: "GenTx",
			Handler:    _SlaveServerSideOp_GenTx_Handler,
		},
		{
			MethodName: "AddRootBlock",
			Handler:    _SlaveServerSideOp_AddRootBlock_Handler,
		},
		{
			MethodName: "GetUnconfirmedHeaderList",
			Handler:    _SlaveServerSideOp_GetUnconfirmedHeaderList_Handler,
		},
		{
			MethodName: "GetAccountData",
			Handler:    _SlaveServerSideOp_GetAccountData_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _SlaveServerSideOp_AddTransaction_Handler,
		},
		{
			MethodName: "GetMinorBlock",
			Handler:    _SlaveServerSideOp_GetMinorBlock_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _SlaveServerSideOp_GetTransaction_Handler,
		},
		{
			MethodName: "ExecuteTransaction",
			Handler:    _SlaveServerSideOp_ExecuteTransaction_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _SlaveServerSideOp_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "GetTransactionListByAddress",
			Handler:    _SlaveServerSideOp_GetTransactionListByAddress_Handler,
		},
		{
			MethodName: "GetAllTx",
			Handler:    _SlaveServerSideOp_GetAllTx_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _SlaveServerSideOp_GetLogs_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _SlaveServerSideOp_EstimateGas_Handler,
		},
		{
			MethodName: "GetStorageAt",
			Handler:    _SlaveServerSideOp_GetStorageAt_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _SlaveServerSideOp_GetCode_Handler,
		},
		{
			MethodName: "GasPrice",
			Handler:    _SlaveServerSideOp_GasPrice_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _SlaveServerSideOp_GetWork_Handler,
		},
		{
			MethodName: "SubmitWork",
			Handler:    _SlaveServerSideOp_SubmitWork_Handler,
		},
		{
			MethodName: "GetRootChainStakes",
			Handler:    _SlaveServerSideOp_GetRootChainStakes_Handler,
		},
		{
			MethodName: "AddXshardTxList",
			Handler:    _SlaveServerSideOp_AddXshardTxList_Handler,
		},
		{
			MethodName: "BatchAddXshardTxList",
			Handler:    _SlaveServerSideOp_BatchAddXshardTxList_Handler,
		},
		{
			MethodName: "AddMinorBlockListForSync",
			Handler:    _SlaveServerSideOp_AddMinorBlockListForSync_Handler,
		},
		{
			MethodName: "SetMining",
			Handler:    _SlaveServerSideOp_SetMining_Handler,
		},
		{
			MethodName: "CheckMinorBlocksInRoot",
			Handler:    _SlaveServerSideOp_CheckMinorBlocksInRoot_Handler,
		},
		{
			MethodName: "GetMinorBlockList",
			Handler:    _SlaveServerSideOp_GetMinorBlockList_Handler,
		},
		{
			MethodName: "GetMinorBlockHeaderList",
			Handler:    _SlaveServerSideOp_GetMinorBlockHeaderList_Handler,
		},
		{
			MethodName: "GetMinorBlockHeaderListWithSkip",
			Handler:    _SlaveServerSideOp_GetMinorBlockHeaderListWithSkip_Handler,
		},
		{
			MethodName: "HandleNewTip",
			Handler:    _SlaveServerSideOp_HandleNewTip_Handler,
		},
		{
			MethodName: "AddTransactions",
			Handler:    _SlaveServerSideOp_AddTransactions_Handler,
		},
		{
			MethodName: "HandleNewMinorBlock",
			Handler:    _SlaveServerSideOp_HandleNewMinorBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
